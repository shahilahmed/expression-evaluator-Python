import copyclass CodeGen:		def __init__(self,tree = []):		self.tree = copy.deepcopy(tree)	def compile_exp(self,exp = []):		result = None		if isinstance(exp,list):			symbol = exp[0]			if symbol in ['+','-','*','/']:				if len(exp) == 2:					pass				elif len(exp) == 3:					arr = []					arr.append(self.compile_exp(exp[1]))					for arg in exp[2:]:						arr.append(self.compile_exp(arg))						if symbol == '+':							arr.append(["ADD"])						elif symbol == '-':							arr.append(["SUB"])						elif symbol == '*':							arr.append(["MUL"])						elif symbol == '/':							arr.append(["DIV"])						elif symbol == '%':							arr.append(["MOD"])					result = arr		elif isinstance(exp,int) or isinstance(exp,float):			result = ["CONST",exp]		elif isinstance(exp,str):			raise Exception("Variable: \"{}\" is not defined.".format(exp))		return result				def codegen(self):		code = self.compile_exp(self.tree)		print(code)		return []	